# Cursor AI Assistant Safety Rules
# These rules help prevent destructive commands and data loss

## CRITICAL SAFETY RULES

### Git Commands - EXTREME CAUTION REQUIRED
- NEVER run `git clean -fd` without explicit user confirmation and understanding of scope
- ALWAYS run `git clean -nd` first to show what would be deleted
- ALWAYS verify the repository root with `git rev-parse --show-toplevel` before destructive commands
- NEVER run destructive git commands when the repo root is outside the project directory
- If git repo root is in user profile (like C:\Users\Username), STOP and warn the user

### File System Commands - DANGER ZONE
- NEVER run `rm -rf` or `rmdir /s` without explicit user permission
- NEVER run `del /s` or `Remove-Item -Recurse -Force` on system directories
- ALWAYS confirm the target directory before running destructive commands
- NEVER run commands that could affect files outside the current project directory

### Before Running ANY Destructive Command:
1. Show the user exactly what will be affected
2. Explain the potential consequences
3. Ask for explicit confirmation
4. Suggest safer alternatives first
5. If in doubt, DON'T run the command

### Project Directory Safety
- ALWAYS verify you're in the correct project directory before running commands
- If the current directory seems wrong, ask the user to confirm
- NEVER assume the working directory is correct for destructive operations

### Recovery Commands
- When suggesting file recovery, always recommend free tools first (Recuva, PhotoRec, Windows File Recovery)
- Never suggest paid recovery software without mentioning free alternatives
- Always recommend recovering to a different drive first

### User Profile Protection
- If any command would affect AppData, Documents, Desktop, or other user profile directories, STOP and warn
- These areas contain personal data and should never be touched without explicit user permission

## SAFE ALTERNATIVES

### Instead of `git clean -fd`:
- Use `git clean -nd` to preview
- Use `git stash` to temporarily save changes
- Manually remove specific files if needed
- Use `git reset --hard` only after confirming it's safe

### Instead of destructive file operations:
- Use copy operations first
- Create backups before making changes
- Use version control for code changes
- Test commands in safe directories first

## EMERGENCY PROCEDURES
- If a destructive command is accidentally run, immediately stop and assess damage
- Guide user through file recovery steps
- Help identify what was lost and prioritize recovery
- Never minimize the impact of data loss

## REMEMBER
- It's better to ask too many questions than to cause data loss
- When in doubt, don't run the command
- Always prioritize user data safety over convenience
- A few extra steps to be safe is always worth it
